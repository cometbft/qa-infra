- name: install golang
  hosts: validators
  become: false
  gather_facts: yes
 
  tasks:
  - debug: msg="play_hosts={{play_hosts}}"

  - debug: msg="user={{ ansible_user_id }}"
   
  - debug: msg="home={{ ansible_user_dir }}"
   
  - name: check current golang version
    command: bash -c "/usr/local/go/bin/go version|sed -e 's/go version go//g'|cut -d' ' -f1"
    ignore_errors: yes
    register: go_version
    changed_when: false
 
  - debug: msg="go_version={{go_version.stdout}}"
  - debug: msg="new_go_version={{new_go_version}}"
 
  - name: continue only when version is older
    fail: msg="Version already exists"
    when: go_version.stdout != "" and "go_version.stdout | version_compare('{{new_go_version}}', operator='ge', strict=True)"
 
  - debug: msg="continuing with installation"
 
  - name: download golang tar 
    get_url:
      url: "https://storage.googleapis.com/golang/go{{new_go_version}}.linux-amd64.tar.gz"
      dest: "{{ansible_user_dir}}"
      mode: 0440
     
  - name: Remove old installation of Go
    file:
      path: /usr/local/go
      state: absent
    become: yes
 
  - name: Extract the Go tarball
    unarchive:
      src: "{{ansible_user_dir}}/go{{new_go_version}}.linux-amd64.tar.gz"
      dest: /usr/local
      copy: no
    become: yes
 
  - name: create go directories in home
    file:
      path: "{{item}}"
      state: directory
      owner: "{{ansible_user_id}}"
      group: "{{ansible_user_id}}"
      mode: 0775
    with_items:
    - "{{ansible_user_dir}}/go"
    - "{{ansible_user_dir}}/go/bin"
     
  - name: modify .bashrc
    blockinfile:
      dest: "{{ansible_user_dir}}/.bashrc"
      block: |
        export GOPATH=$HOME/go
        export GOBIN=$GOPATH/bin
        export PATH=$GOBIN:$PATH:/usr/local/go/bin
      marker: '# {mark} ANSIBLE MANAGED BLOCK - changes for golang'
      insertafter: EOF
      create: yes 
        
  - name: Remove tar file
    file:
      path: {{ ansible_user_dir }}/go{{go_version.stdout}}.linux-amd64.tar.gz
      state: absent
